import os
import cv2
import torch
import time
import queue
import threading
from datetime import datetime
from autoTransform.transform import process_auto_transform
from splitImage.split import process_split_image
from readLicense.read import process_read_license
from ultralytics import YOLO
import tkinter as tk
from tkinter import ttk
import RPi.GPIO as GPIO
import subprocess
import warnings
from PIL import Image, ImageTk
import requests
import io
import numpy as np
import datetime

warnings.filterwarnings("ignore")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
YOLO_WIDTH = 640
YOLO_HEIGHT = 640
OCR_SIZE = 224
DISPLAY_WIDTH = 640
DISPLAY_HEIGHT = 480
FPS = 60
FRAME_BUFFER_SIZE = 1  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î buffer ‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤

CAMERA_SRC = 0


API_URL =  "http://10.240.67.29:3000/parking/entry-raspi"

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ GPIO pins
BUTTON_PIN = 31
RED_LIGHT_PIN = 16
GREEN_LIGHT_PIN = 18
IR_SENSOR_PIN = 22




# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Trigger Zone
ZONE_LEFT = 30
ZONE_RIGHT = 70
ZONE_TOP = 0
ZONE_BOTTOM = 100

stop_event = threading.Event()
last_successful_plate = None
current_frame = None  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö frame ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

def setup_gpio():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPIO ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î GPIO ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    try:
        GPIO.cleanup()
    except:
        pass
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GPIO mode
    GPIO.setmode(GPIO.BOARD)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GPIO pins
    GPIO.setup(BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    GPIO.setup(RED_LIGHT_PIN, GPIO.OUT, initial=GPIO.LOW)
    GPIO.setup(GREEN_LIGHT_PIN, GPIO.OUT, initial=GPIO.LOW)
    GPIO.setup(IR_SENSOR_PIN, GPIO.IN)
    
    print("GPIO setup completed")

def control_lights(red_state, green_state):
    """‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü LED ‡πÅ‡∏ö‡∏ö active-high
    
    Args:
        red_state (bool): True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á, False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
        green_state (bool): True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß, False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
    """
    # Active-high - ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢ HIGH ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢ LOW
    GPIO.output(RED_LIGHT_PIN, GPIO.HIGH if red_state else GPIO.LOW)
    GPIO.output(GREEN_LIGHT_PIN, GPIO.HIGH if green_state else GPIO.LOW)

def turn_red():
    """‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß"""
    control_lights(True, False)

def turn_green():
    """‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á"""
    control_lights(False, True)

def run_printer_script(plate_number):
    print(f"Running printer.py with plate number: {plate_number}")
    subprocess.run(["python3", "printer/printer.py", plate_number])

def button_listener(frame_queue):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    global last_successful_plate
    
    while not stop_event.is_set():
        button_state = GPIO.input(BUTTON_PIN)
        if button_state == GPIO.LOW:  # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
            print("Button Pressed!")
            
            if last_successful_plate:
                try:
                    # ‡∏î‡∏∂‡∏á frame ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å queue
                    if not frame_queue.empty():
                        current_frame = frame_queue.get()
                        
                        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {last_successful_plate}")
                        
                        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á server
                        if send_data(API_URL, current_frame, last_successful_plate):
                            print("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                            run_printer_script(last_successful_plate)
                        else:
                            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
                        
                        # ‡πÉ‡∏™‡πà frame ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ queue
                        frame_queue.put(current_frame)
                    else:
                        print("‡πÑ‡∏°‡πà‡∏û‡∏ö frame ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß")
                        
                except Exception as e:
                    print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
                
                time.sleep(1)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ã‡πâ‡∏≥
                
        time.sleep(0.1)  # ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ CPU

def ir_light_controller():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á IR sensor ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î"""
    last_state = None  # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á IR sensor
    waiting_for_ir = False  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠ IR sensor
    green_light_active = False  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡πÅ‡∏î‡∏á
    control_lights(True, False)
    print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö - ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á")
    
    while not stop_event.is_set():
        try:
            current_ir_state = GPIO.input(IR_SENSOR_PIN)
            button_state = GPIO.input(BUTTON_PIN)
            
            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î
            if button_state == GPIO.LOW and not green_light_active:
                print("‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î - ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß")
                control_lights(False, True)  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                green_light_active = True
                waiting_for_ir = True
                time.sleep(0.5)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ã‡πâ‡∏≥
                continue
            
            # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠ IR ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ú‡πà‡∏≤‡∏ô
            if waiting_for_ir and current_ir_state != last_state:
                if current_ir_state == GPIO.HIGH:  # ‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ú‡πà‡∏≤‡∏ô
                    print("IR Sensor: ‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ú‡πà‡∏≤‡∏ô - ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                    time.sleep(2)  # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    print("‡∏Ñ‡∏£‡∏ö 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ - ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á")
                    control_lights(True, False)  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á
                    green_light_active = False
                    waiting_for_ir = False
                last_state = current_ir_state
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠ IR ‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡πÅ‡∏î‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏•‡∏≠‡∏î
            elif not waiting_for_ir and not green_light_active:
                control_lights(True, False)  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á
            
            time.sleep(0.1)
            
        except Exception as e:
            print(f"IR controller error: {str(e)}")
            time.sleep(1)

def cleanup_gpio():
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î GPIO ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    try:
        GPIO.setmode(GPIO.BOARD)  # ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á mode ‡∏Å‡πà‡∏≠‡∏ô cleanup
        GPIO.cleanup()  # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î GPIO ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    except Exception as e:
        print(f"GPIO cleanup error: {str(e)}")


# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
def get_formatted_time():
    """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS"""
    return datetime.datetime.now().strftime("%H:%M:%S")



################################# ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Server ####################

def send_data(api_url: str, frame: np.ndarray, license_plate: str):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server

    Args:
        api_url (str): URL ‡∏Ç‡∏≠‡∏á API
        frame (np.ndarray): ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
        license_plate (str): ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ

    Returns:
        bool: True ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    """
    try:
        # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        timestamp = datetime.datetime.now().strftime("%H%M%S")
        filename = f"{license_plate}_{timestamp}.jpg"

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô JPEG buffer
        _, buffer = cv2.imencode(".jpg", frame)
        image_io = io.BytesIO(buffer)

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á
        data = {"licensePlate": license_plate}
        files = {"image": (filename, image_io, "image/jpeg")}

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        response = requests.post(api_url, data=data, files=files)
        response_data = response.json()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö success ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        if response_data.get('success') == True:
            print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response_data}")
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å response
            car_id = response_data['data']['carId']
            parking_record_id = response_data['data']['parkingRecordId']  # ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å entryRecordId ‡πÄ‡∏õ‡πá‡∏ô parkingRecordId
            payment_id = response_data['data']['paymentId']
            print(f"üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:")
            print(f"   - Car ID: {car_id}")
            print(f"   - Parking Record ID: {parking_record_id}")  # ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
            print(f"   - Payment ID: {payment_id}")
            return True
        else:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response_data}")
            return False

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        return False




def update_gui(frame, video_label):
    """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á GUI ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ double buffering"""
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô RGB
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(frame)
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á PhotoImage ‡πÅ‡∏ö‡∏ö double buffering
        img_tk = ImageTk.PhotoImage(image=img)
        # ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô garbage collection
        video_label.photo = img_tk
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏†‡∏≤‡∏û
        video_label.configure(image=img_tk)
    except Exception as e:
        print(f"GUI update error: {str(e)}")



def capture_frame(cap, frame_queue):
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ buffer size ‡∏Ç‡∏≠‡∏á OpenCV
    cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ FPS ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cap.set(cv2.CAP_PROP_FPS, 1)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 30 FPS
    
    while not stop_event.is_set():
        ret, frame = cap.read()
        if not ret:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
            stop_event.set()
            break
        
        # ‡∏•‡πâ‡∏≤‡∏á frame ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue
        while not frame_queue.empty():
            try:
                frame_queue.get_nowait()
            except queue.Empty:
                break
        
        frame_queue.put(frame)
        

def process_frame(frame_queue, model, last_ocr_time, trigger_zone, model_path, font_path, 
                 ocr_results_queue, video_label, plate_label, time_label, root):
    global last_successful_plate

    # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    object_in_zone = False
    last_successful_plate = None
    waiting_for_exit = False
    trigger_start_time = 0
    last_ocr_time = time.time()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ OCR
    min_confidence_threshold = 0.6  # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OCR
    last_gui_update = time.time()
    GUI_UPDATE_INTERVAL = 1/30  # 30 FPS
    
    while not stop_event.is_set():
        try:
            original_frame = frame_queue.get(timeout=1)
            
            yolo_frame = cv2.resize(original_frame.copy(), (YOLO_WIDTH, YOLO_HEIGHT))
            
            height, width = original_frame.shape[:2]
            scale_x = width / YOLO_WIDTH
            scale_y = height / YOLO_HEIGHT
            
            actual_trigger_zone = (
                (int(trigger_zone[0][0] * scale_x), int(trigger_zone[0][1] * scale_y)),
                (int(trigger_zone[1][0] * scale_x), int(trigger_zone[1][1] * scale_y))
            )
            
            cv2.rectangle(original_frame, actual_trigger_zone[0], actual_trigger_zone[1], (255, 0, 0), 2)

            results = model.predict(yolo_frame, verbose=False)[0]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô trigger zone ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            plate_in_zone = False

            if len(results.boxes) > 0:
                for box in results.boxes:
                    coords = box.xyxy[0].cpu().numpy()
                    conf = float(box.conf)
                    cls = int(box.cls)

                    if conf < model.conf:
                        continue
                    
                    xmin, ymin, xmax, ymax = coords
                    real_xmin = int(xmin * scale_x)
                    real_ymin = int(ymin * scale_y)
                    real_xmax = int(xmax * scale_x)
                    real_ymax = int(ymax * scale_y)

                    ocr_time_gap = 1

                    if cls in [0, 1]:  # car ‡∏´‡∏£‡∏∑‡∏≠ licenseplate
                        real_cx = (real_xmin + real_xmax) // 2
                        real_cy = (real_ymin + real_ymax) // 2

                        cv2.rectangle(original_frame, (real_xmin, real_ymin), (real_xmax, real_ymax), (0, 255, 0), 2)
                        label = f"{['car', 'licenseplate'][cls]}: {conf:.2%}"
                        cv2.putText(original_frame, label, (real_xmin, real_ymin - 10), 
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5 * max(scale_x, scale_y), (0, 255, 0), 2)

                        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Trigger Zone ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏≠‡∏ö
                        in_trigger_zone = (
                            real_xmin >= actual_trigger_zone[0][0] and
                            real_xmax <= actual_trigger_zone[1][0] and
                            real_ymin >= actual_trigger_zone[0][1] and
                            real_ymax <= actual_trigger_zone[1][1]
                        )
                        
                        if cls == 1:  # licenseplate
                            if in_trigger_zone:
                                plate_in_zone = True
                                
                                if not waiting_for_exit:  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å zone
                                    if not object_in_zone:
                                        object_in_zone = True
                                        trigger_start_time = time.time()
                                    elif time.time() - trigger_start_time >= 1:
                                        current_time = time.time()
                                        if current_time - last_ocr_time >= ocr_time_gap:
                                            print("Starting OCR process.")
                                            plate_img = original_frame[real_ymin:real_ymax, real_xmin:real_xmax]
                                            plate_img = cv2.resize(plate_img, (OCR_SIZE, OCR_SIZE))

                                            try:
                                                transformed_img = process_auto_transform(plate_img)
                                                top_img, _ = process_split_image(transformed_img)
                                                results, confidence = process_read_license(top_img, model_path, font_path)

                                                text = ''.join([char for char, _, _ in results])
                                                
                                                if text and confidence >= min_confidence_threshold:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
                                                    current_time = get_formatted_time()
                                                    
                                                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                                                    if text != last_successful_plate:
                                                        print(f"\nDetected new license plate:")
                                                        print(f"License plate: {text}")
                                                        print(f"Confidence: {confidence:.2%}")
                                                        print(f"Time: {current_time}")
                                                        
                                                        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á GUI
                                                        ocr_results_queue.put({
                                                            'plate': text,
                                                            'time': current_time,
                                                            'confidence': confidence
                                                        })
                                                        
                                                        last_successful_plate = text
                                                        waiting_for_exit = True  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å zone
                                                    
                                                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤ OCR ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                                                    last_ocr_time = time.time()

                                            except Exception as e:
                                                print(f"OCR Error: {str(e)}")
                                                continue
                            else:
                                object_in_zone = False
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡∏≠‡∏á trigger zone ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            trigger_zone_color = (0, 0, 255) if plate_in_zone else (255, 0, 0)  # ‡πÅ‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡πâ‡∏≤‡∏¢ ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
            cv2.rectangle(original_frame, actual_trigger_zone[0], actual_trigger_zone[1], trigger_zone_color, 2)

            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô zone ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å
            if not plate_in_zone and waiting_for_exit:
                waiting_for_exit = False  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ OCR ‡∏õ‡πâ‡∏≤‡∏¢‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ
                print(f"License plate {last_successful_plate} has left the trigger zone")
                last_successful_plate = None  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

            
            # ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI
            current_time = time.time()
            if current_time - last_gui_update >= GUI_UPDATE_INTERVAL:
                display_frame = cv2.resize(original_frame, (DISPLAY_WIDTH, DISPLAY_HEIGHT))
                # ‡πÉ‡∏ä‡πâ root.after ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô main thread
                root.after(0, lambda: update_gui(display_frame, video_label))
                last_gui_update = current_time

            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô main thread
            try:
                result = ocr_results_queue.get_nowait()
                if isinstance(result, dict):
                    plate_text = result.get('plate', '')
                    time_text = result.get('time', '')
                    root.after(0, lambda: plate_label.config(text=f"‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {plate_text}"))
                    root.after(0, lambda: time_label.config(text=f"‡πÄ‡∏ß‡∏•‡∏≤: {time_text}"))
            except queue.Empty:
                pass

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
            if not root.winfo_exists():
                print("‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î")
                stop_event.set()
                break

        except queue.Empty:
            continue
        except Exception as e:
            print(f"Processing error: {str(e)}")



def main():
    try:
        model_path = "readLicense/EfficientNet_model3.pth"
        yolo_model_path = "detectCar/yolov8/best_v8_2.pt"
        font_path = "AnantasonReno-SemiExpanded-Italic.otf"
        capture_dir = "captured_plates"
        os.makedirs(capture_dir, exist_ok=True)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GPIO
        setup_gpio()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ML
        model = YOLO(yolo_model_path)
        model.conf = 0.5
        model.max_det = 1

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° camera
        cap = cv2.VideoCapture(CAMERA_SRC)
        if not cap.isOpened():
            raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
            
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ buffer ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
        cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì trigger zone
        trigger_zone = (
            (int(YOLO_WIDTH * ZONE_LEFT/100), int(YOLO_HEIGHT * ZONE_TOP/100)),
            (int(YOLO_WIDTH * ZONE_RIGHT/100), int(YOLO_HEIGHT * ZONE_BOTTOM/100))
        )
        
        frame_queue = queue.Queue(maxsize=FRAME_BUFFER_SIZE)
        ocr_results_queue = queue.Queue()
        last_ocr_time = 0
        stop_event.clear()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
        root = tk.Tk()
        root.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á frame ‡∏´‡∏•‡∏±‡∏Å
        main_frame = ttk.Frame(root)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        video_label = ttk.Label(main_frame)
        video_label.pack(pady=20)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
        info_frame = ttk.Frame(main_frame)
        info_frame.pack(fill=tk.X, padx=20, pady=5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á labels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
        plate_label = ttk.Label(info_frame, text="‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: -", font=("Helvetica", 150))
        plate_label.pack(fill=tk.X, pady=20)
        
        time_label = ttk.Label(info_frame, text="‡πÄ‡∏ß‡∏•‡∏≤: -", font=("Helvetica", 150))
        time_label.pack(fill=tk.X, pady=20)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á threads
        button_thread = threading.Thread(target=button_listener, args=(frame_queue,), daemon=True)
        ir_thread = threading.Thread(target=ir_light_controller, daemon=True)
        capture_thread = threading.Thread(target=capture_frame, args=(cap, frame_queue), daemon=True)
        
        # ‡∏™‡πà‡∏á root ‡πÉ‡∏´‡πâ process_frame ‡∏î‡πâ‡∏ß‡∏¢
        process_thread = threading.Thread(
            target=process_frame,
            args=(frame_queue, model, last_ocr_time, trigger_zone, model_path, font_path,
                  ocr_results_queue, video_label, plate_label, time_label, root),
            daemon=True
        )

        # ‡πÄ‡∏£‡∏¥‡πà‡∏° threads
        button_thread.start()
        ir_thread.start()
        capture_thread.start()
        process_thread.start()

        root.mainloop()

        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
        stop_event.set()

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ threads ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        for thread in [capture_thread, process_thread, button_thread, ir_thread]:
            thread.join(timeout=2)

    except Exception as e:
        print(f"\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        stop_event.set()
    finally:
        stop_event.set()
        if 'cap' in locals():
            cap.release()
        cv2.destroyAllWindows()
        cleanup_gpio()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢ Ctrl+C")
    finally:
        stop_event.set()
        cleanup_gpio()